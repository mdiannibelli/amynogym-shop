// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Gender {
  men
  women
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique // No quiero tener 2 categorías iguales por lo tanto "@unique"

  Product Product[] // Crea la relación con producto, esto no crea otra columna solo establece la relación
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float    @default(0)
  inStock     Int
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relaciones
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String // El campo categoryId será el campo [id] del model Category, creamos la relación de esta manera

  ProductImages ProductImages[]

  // Agrego un índice para buscar productos por género 
  @@index([gender])
}

model ProductImages {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?
  UserAdress UserAdress?
}

model Country {
  id   String @id
  name String
  UserAdress UserAdress[]
}

model UserAdress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  adress     String
  adress2    String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country Country @relation(fields: [countryId], references: [id]) //1:n
  countryId String

  user User @relation(fields: [userId], references:[id]) // 1:1
  userId String @unique
}
